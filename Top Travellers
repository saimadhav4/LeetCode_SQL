1407. Top Travellers (https://leetcode.com/problems/top-travellers/?envType=list&envId=e97a9e5m)

Table: Users

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| id            | int     |
| name          | varchar |
+---------------+---------+
id is the primary key for this table.
name is the name of the user.
 

Table: Rides

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| id            | int     |
| user_id       | int     |
| distance      | int     |
+---------------+---------+
id is the primary key for this table.
user_id is the id of the user who traveled the distance "distance".
 

Write an SQL query to report the distance traveled by each user.

Return the result table ordered by travelled_distance in descending order, if two or more users traveled the same distance, order them by their name in ascending order.

The query result format is in the following example.

 

Example 1:

Input: 
Users table:
+------+-----------+
| id   | name      |
+------+-----------+
| 1    | Alice     |
| 2    | Bob       |
| 3    | Alex      |
| 4    | Donald    |
| 7    | Lee       |
| 13   | Jonathan  |
| 19   | Elvis     |
+------+-----------+
Rides table:
+------+----------+----------+
| id   | user_id  | distance |
+------+----------+----------+
| 1    | 1        | 120      |
| 2    | 2        | 317      |
| 3    | 3        | 222      |
| 4    | 7        | 100      |
| 5    | 13       | 312      |
| 6    | 19       | 50       |
| 7    | 7        | 120      |
| 8    | 19       | 400      |
| 9    | 7        | 230      |
+------+----------+----------+
Output: 
+----------+--------------------+
| name     | travelled_distance |
+----------+--------------------+
| Elvis    | 450                |
| Lee      | 450                |
| Bob      | 317                |
| Jonathan | 312                |
| Alex     | 222                |
| Alice    | 120                |
| Donald   | 0                  |
+----------+--------------------+
Explanation: 
Elvis and Lee traveled 450 miles, Elvis is the top traveler as his name is alphabetically smaller than Lee.
Bob, Jonathan, Alex, and Alice have only one ride and we just order them by the total distances of the ride.
Donald did not have any rides, the distance traveled by him is 0.


Summary :

1. We have two tables, Users and Rides. The Users table contains information about users, and the Rides table contains information about rides taken by users.

2. The Users table has two columns: id (unique identifier for each user) and name (name of the user). The id column is the primary key of the table.

3. The Rides table has three columns: id (unique identifier for each ride), user_id (id of the user who took the ride), and distance (distance traveled in that ride). The id column is the primary key of the table.

4. The goal is to calculate the total distance traveled by each user and report it in a result table. We need to group the rides by user_id, sum up the distances for each user, and order the result table based on the total distance traveled.

5. If two or more users have traveled the same distance, we need to order them by their names in ascending order.

6. The result table should have two columns: name (name of the user) and travelled_distance (total distance traveled by the user).


Solutions :

1. Using IFNULL

SELECT Users.name, IFNULL(SUM(Rides.distance), 0) as travelled_distance 
FROM Users 
LEFT JOIN Rides 
ON Users.id = Rides.user_id 
GROUP BY Rides.user_id 
ORDER BY travelled_distance DESC, Users.name ;

2. Using IF

SELECT name , IF(SUM(distance) , SUM(distance), 0) AS travelled_distance  
FROM users AS u 
LEFT JOIN rides AS r 
ON u.id = r.user_id 
GROUP BY u.id 
ORDER BY travelled_distance DESC , name ASC ;
