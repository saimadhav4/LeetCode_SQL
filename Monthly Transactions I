1193. Monthly Transactions I (https://leetcode.com/problems/monthly-transactions-i/?envType=study-plan-v2&envId=top-sql-50)

Table: Transactions

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| id            | int     |
| country       | varchar |
| state         | enum    |
| amount        | int     |
| trans_date    | date    |
+---------------+---------+
id is the primary key of this table.
The table has information about incoming transactions.
The state column is an enum of type ["approved", "declined"].
 

Write an SQL query to find for each month and country, the number of transactions and their total amount, the number of approved transactions and their total amount.

Return the result table in any order.

The query result format is in the following example.

 

Example 1:

Input: 
Transactions table:
+------+---------+----------+--------+------------+
| id   | country | state    | amount | trans_date |
+------+---------+----------+--------+------------+
| 121  | US      | approved | 1000   | 2018-12-18 |
| 122  | US      | declined | 2000   | 2018-12-19 |
| 123  | US      | approved | 2000   | 2019-01-01 |
| 124  | DE      | approved | 2000   | 2019-01-07 |
+------+---------+----------+--------+------------+
Output: 
+----------+---------+-------------+----------------+--------------------+-----------------------+
| month    | country | trans_count | approved_count | trans_total_amount | approved_total_amount |
+----------+---------+-------------+----------------+--------------------+-----------------------+
| 2018-12  | US      | 2           | 1              | 3000               | 1000                  |
| 2019-01  | US      | 1           | 1              | 2000               | 2000                  |
| 2019-01  | DE      | 1           | 1              | 2000               | 2000                  |
+----------+---------+-------------+----------------+--------------------+-----------------------+


Summary :


Step 1: Understand the Table

      We have a table named "Transactions" that contains information about incoming transactions.
      Each row in the table represents a transaction with columns: "id" (the unique identifier for each transaction), "country" (the country where the transaction took place), "state" (the state of the transaction, either "approved" or "declined"), "amount" (the transaction amount), and "trans_date" (the date of the transaction).

Step 2: Group Transactions by Month and Country

      We need to group the transactions by month and country to find the number of transactions and their total amount for each combination of month and country.

Step 3: Count and Sum Transactions based on State

      For each group of transactions (month and country), we need to count the number of transactions and their total amount.
      Additionally, we need to count the number of approved transactions and their total amount for each group.

Step 4: Formulate the SQL Query
Write an SQL query to find, for each month and country, the number of transactions and their total amount, the number of approved transactions and their total amount:

      Use the GROUP BY clause to group the transactions by month (using the MONTH function on the "trans_date" column) and country.
      Use the CASE statement to conditionally count and sum transactions based on their state being "approved" or "declined."
      Select the grouped data and the calculated counts and sums in the final result.


Solutions :

1. Using CONCAT

SELECT
    CONCAT(YEAR(trans_date), '-', LPAD(MONTH(trans_date), 2, '0')) AS month,
    country,
    COUNT(*) AS trans_count,
    SUM(CASE WHEN state = 'approved' THEN 1 ELSE 0 END) AS approved_count,
    SUM(amount) AS trans_total_amount,
    SUM(CASE WHEN state = 'approved' THEN amount ELSE 0 END) AS approved_total_amount
FROM
    Transactions
GROUP BY
    month,
    country;


2. Using DATE_FORMAT

SELECT
  DATE_FORMAT(trans_date, '%Y-%m') AS month,
  country,
  COUNT(*) AS trans_count,
  SUM(IF(state = 'approved', 1, 0)) AS approved_count,
  SUM(amount) AS trans_total_amount,
  SUM(IF(state = 'approved', amount, 0)) AS approved_total_amount
FROM Transactions
GROUP BY DATE_FORMAT(trans_date, '%Y-%m'), country;
