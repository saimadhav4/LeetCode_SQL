1341. Movie Rating (https://leetcode.com/problems/movie-rating/?envType=study-plan-v2&envId=top-sql-50)

Table: Movies

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| movie_id      | int     |
| title         | varchar |
+---------------+---------+
movie_id is the primary key for this table.
title is the name of the movie.
 

Table: Users

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| user_id       | int     |
| name          | varchar |
+---------------+---------+
user_id is the primary key for this table.
 

Table: MovieRating

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| movie_id      | int     |
| user_id       | int     |
| rating        | int     |
| created_at    | date    |
+---------------+---------+
(movie_id, user_id) is the primary key for this table.
This table contains the rating of a movie by a user in their review.
created_at is the user's review date. 
 

Write an SQL query to:

Find the name of the user who has rated the greatest number of movies. In case of a tie, return the lexicographically smaller user name.
Find the movie name with the highest average rating in February 2020. In case of a tie, return the lexicographically smaller movie name.
The query result format is in the following example.

 

Example 1:

Input: 
Movies table:
+-------------+--------------+
| movie_id    |  title       |
+-------------+--------------+
| 1           | Avengers     |
| 2           | Frozen 2     |
| 3           | Joker        |
+-------------+--------------+
Users table:
+-------------+--------------+
| user_id     |  name        |
+-------------+--------------+
| 1           | Daniel       |
| 2           | Monica       |
| 3           | Maria        |
| 4           | James        |
+-------------+--------------+
MovieRating table:
+-------------+--------------+--------------+-------------+
| movie_id    | user_id      | rating       | created_at  |
+-------------+--------------+--------------+-------------+
| 1           | 1            | 3            | 2020-01-12  |
| 1           | 2            | 4            | 2020-02-11  |
| 1           | 3            | 2            | 2020-02-12  |
| 1           | 4            | 1            | 2020-01-01  |
| 2           | 1            | 5            | 2020-02-17  | 
| 2           | 2            | 2            | 2020-02-01  | 
| 2           | 3            | 2            | 2020-03-01  |
| 3           | 1            | 3            | 2020-02-22  | 
| 3           | 2            | 4            | 2020-02-25  | 
+-------------+--------------+--------------+-------------+
Output: 
+--------------+
| results      |
+--------------+
| Daniel       |
| Frozen 2     |
+--------------+
Explanation: 
Daniel and Monica have rated 3 movies ("Avengers", "Frozen 2" and "Joker") but Daniel is smaller lexicographically.
Frozen 2 and Joker have a rating average of 3.5 in February but Frozen 2 is smaller lexicographically.


Summary :

1. Tables Overview: You are given three tables - "Movies," "Users," and "MovieRating," each with specific columns:

      "Movies" table has columns "movie_id" (unique ID for movies) and "title" (name of the movie).
      "Users" table has columns "user_id" (unique ID for users) and "name" (name of the user).
      "MovieRating" table has columns "movie_id" (ID of the movie), "user_id" (ID of the user who rated the movie), "rating" (the rating given by the user), and "created_at" (review date).

2. Task 1: Find the user who has rated the greatest number of movies. If there's a tie (multiple users with the same highest number of ratings), return the user with the lexicographically smaller name.

      In other words, you need to count how many movies each user has rated, find the user with the maximum count, and if there are multiple users with the same maximum count, choose the one with the lexicographically smaller name.

3. Task 2: Find the movie name with the highest average rating in February 2020. If there's a tie (multiple movies with the same highest average rating), return the movie with the lexicographically smaller name.

      You need to calculate the average rating of each movie for all the reviews in February 2020. Then, find the movie with the highest average rating, and if there are multiple movies with the same highest average rating, choose the one with the lexicographically smaller name.

4. Output Format: The output should consist of two rows:

      Row 1: The name of the user who has rated the greatest number of movies or the tie-breaker user with the lexicographically smaller name.
      Row 2: The movie name with the highest average rating in February 2020 or the tie-breaker movie with the lexicographically smaller name.



Solutions:

1.

SELECT results
FROM (
    SELECT IFNULL(u.name, '') AS results, COUNT(DISTINCT r.movie_id) AS num_movies
    FROM Users u
    LEFT JOIN MovieRating r ON u.user_id = r.user_id
    GROUP BY u.user_id
    ORDER BY num_movies DESC, u.name ASC
    LIMIT 1
) AS user_ratings
UNION ALL
SELECT results
FROM (
    SELECT IFNULL(m.title, '') AS results, AVG(r.rating) AS avg_rating
    FROM MovieRating r
    JOIN Movies m ON r.movie_id = m.movie_id
    WHERE YEAR(r.created_at) = 2020 AND MONTH(r.created_at) = 2
    GROUP BY r.movie_id
    ORDER BY avg_rating DESC, m.title ASC
    LIMIT 1
) AS movie_ratings;


2. 

WITH cte as (SELECT m.user_id , m.movie_id , m.rating , u.name , mo.title , m.created_at 
FROM MovieRating m
LEFT JOIN Users u on u.user_id = m.user_id
LEFT JOIN Movies mo on mo.movie_id = m.movie_id)


(SELECT name as results 
FROM cte
GROUP BY user_id
ORDER BY count(*) desc , name limit 1)
UNION ALL
(SELECT title 
FROM cte
WHERE month(created_at)=2 and year(created_at)=2020
GROUP BY  movie_id
ORDER BY avg(rating) desc , title limit 1);
