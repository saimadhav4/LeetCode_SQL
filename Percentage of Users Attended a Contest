1633. Percentage of Users Attended a Contest (https://leetcode.com/problems/percentage-of-users-attended-a-contest/?envType=study-plan-v2&envId=top-sql-50)


Table: Users

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| user_id     | int     |
| user_name   | varchar |
+-------------+---------+
user_id is the primary key for this table.
Each row of this table contains the name and the id of a user.
 

Table: Register

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| contest_id  | int     |
| user_id     | int     |
+-------------+---------+
(contest_id, user_id) is the primary key for this table.
Each row of this table contains the id of a user and the contest they registered into.
 

Write an SQL query to find the percentage of the users registered in each contest rounded to two decimals.

Return the result table ordered by percentage in descending order. In case of a tie, order it by contest_id in ascending order.

The query result format is in the following example.

 

Example 1:

Input: 
Users table:
+---------+-----------+
| user_id | user_name |
+---------+-----------+
| 6       | Alice     |
| 2       | Bob       |
| 7       | Alex      |
+---------+-----------+
Register table:
+------------+---------+
| contest_id | user_id |
+------------+---------+
| 215        | 6       |
| 209        | 2       |
| 208        | 2       |
| 210        | 6       |
| 208        | 6       |
| 209        | 7       |
| 209        | 6       |
| 215        | 7       |
| 208        | 7       |
| 210        | 2       |
| 207        | 2       |
| 210        | 7       |
+------------+---------+
Output: 
+------------+------------+
| contest_id | percentage |
+------------+------------+
| 208        | 100.0      |
| 209        | 100.0      |
| 210        | 100.0      |
| 215        | 66.67      |
| 207        | 33.33      |
+------------+------------+
Explanation: 
All the users registered in contests 208, 209, and 210. The percentage is 100% and we sort them in the answer table by contest_id in ascending order.
Alice and Alex registered in contest 215 and the percentage is ((2/3) * 100) = 66.67%
Bob registered in contest 207 and the percentage is ((1/3) * 100) = 33.33%


Summary :

Step 1: Understand the Table

      We have a table named "Transactions" that contains information about incoming transactions.
      Each row in the table represents a transaction with columns: "id" (the unique identifier for each transaction), "country" (the country where the transaction took place), "state" (the state of the transaction, either "approved" or "declined"), "amount" (the transaction amount), and "trans_date" (the date of the transaction).

Step 2: Group Transactions by Month and Country

      We need to group the transactions by month and country to find the number of transactions and their total amount for each combination of month and country.

Step 3: Count and Sum Transactions based on State

      For each group of transactions (month and country), we need to count the number of transactions and their total amount.
      Additionally, we need to count the number of approved transactions and their total amount for each group.

Step 4: Formulate the SQL Query
Write an SQL query to find, for each month and country, the number of transactions and their total amount, the number of approved transactions and their total amount:

      Use the GROUP BY clause to group the transactions by month (using the MONTH function on the "trans_date" column) and country.
      Use the CASE statement to conditionally count and sum transactions based on their state being "approved" or "declined."
      Select the grouped data and the calculated counts and sums in the final result.


Solutions :

1.

SELECT
    r.contest_id,
    ROUND(COUNT(r.user_id) / (SELECT COUNT(*) FROM Users) * 100, 2) AS percentage
FROM
    Register r
GROUP BY
    r.contest_id
ORDER BY
    percentage DESC, r.contest_id;


2. 

SELECT contest_id, ROUND(((COUNT(contest_id)/(SELECT count(*) FROM users))*100), 2) as percentage
FROM register
GROUP BY contest_id
ORDER BY percentage DESC, contest_id ASC;


3. 

SELECT contest_id, ROUND(((COUNT(contest_id)/(SELECT count(*) FROM users))*100), 2) as percentage
FROM register r
LEFT JOIN users u
ON r.user_id = u.user_id
GROUP BY contest_id
ORDER BY percentage DESC, contest_id ASC;
