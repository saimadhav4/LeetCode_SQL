550. Game Play Analysis IV (https://leetcode.com/problems/game-play-analysis-iv/?envType=study-plan-v2&envId=top-sql-50)

Table: Activity

+--------------+---------+
| Column Name  | Type    |
+--------------+---------+
| player_id    | int     |
| device_id    | int     |
| event_date   | date    |
| games_played | int     |
+--------------+---------+
(player_id, event_date) is the primary key of this table.
This table shows the activity of players of some games.
Each row is a record of a player who logged in and played a number of games (possibly 0) before logging out on someday using some device.
 

Write an SQL query to report the fraction of players that logged in again on the day after the day they first logged in, rounded to 2 decimal places. In other words, you need to count the number of players that logged in for at least two consecutive days starting from their first login date, then divide that number by the total number of players.

The query result format is in the following example.

 

Example 1:

Input: 
Activity table:
+-----------+-----------+------------+--------------+
| player_id | device_id | event_date | games_played |
+-----------+-----------+------------+--------------+
| 1         | 2         | 2016-03-01 | 5            |
| 1         | 2         | 2016-03-02 | 6            |
| 2         | 3         | 2017-06-25 | 1            |
| 3         | 1         | 2016-03-02 | 0            |
| 3         | 4         | 2018-07-03 | 5            |
+-----------+-----------+------------+--------------+
Output: 
+-----------+
| fraction  |
+-----------+
| 0.33      |
+-----------+
Explanation: 
Only the player with id 1 logged back in after the first day he had logged in so the answer is 1/3 = 0.33



Summary :

Step 1: Understand the Table

      We have a table named "Activity" that contains information about the activity of players playing some games.
      Each row in the table represents a player's activity on a particular day using a specific device.
      The columns are "player_id" (the unique identifier for each player), "device_id" (the device used by the player), "event_date" (the date of activity), and "games_played" (the number of games played by the player on that day).

Step 2: Define the Fraction of Players

      We need to find the fraction of players who logged in for at least two consecutive days starting from their first login date.
      In other words, we want to count the number of players who logged in on the day after the day they first logged in, and then divide that number by the total number of players.

Step 3: Calculate the Fraction of Players
To find the fraction of players:

      Identify the players who logged in on consecutive days, starting from their first login date.
      Count the number of players who meet the above condition.
      Divide the number of players who logged in on consecutive days by the total number of players.

Step 4: Formulate the SQL Query
Write an SQL query to report the fraction of players who logged in again on the day after the day they first logged in, rounded to two decimal places:

      Use subqueries to identify the players who logged in on consecutive days starting from their first login date.
      Count the number of players who logged in on consecutive days using the subquery results.
      Calculate the total number of players.
      Divide the count of players who logged in on consecutive days by the total number of players.
      Round the result to two decimal places.


Solutions :

1. 

SELECT
  ROUND(COUNT(DISTINCT player_id) / (SELECT COUNT(DISTINCT player_id) FROM Activity), 2) AS fraction
FROM
  Activity
WHERE
  (player_id, DATE_SUB(event_date, INTERVAL 1 DAY))
  IN (
    SELECT player_id, MIN(event_date) AS first_login FROM Activity GROUP BY player_id
  )


2. Using Sub Query

WITH first_logins AS (
  SELECT
    A.player_id,
    MIN(A.event_date) AS first_login
  FROM
    Activity A
  GROUP BY
    A.player_id
), consec_logins AS (
  SELECT
    COUNT(A.player_id) AS num_logins
  FROM
    first_logins F
    INNER JOIN Activity A ON F.player_id = A.player_id
    AND F.first_login = DATE_SUB(A.event_date, INTERVAL 1 DAY)
)
SELECT
  ROUND(
    (SELECT C.num_logins FROM consec_logins C)
    / (SELECT COUNT(F.player_id) FROM first_logins F)
  , 2) AS fraction;
