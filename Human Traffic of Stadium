601. Human Traffic of Stadium (https://leetcode.com/problems/human-traffic-of-stadium/?envType=list&envId=e97a9e5m)

Table: Stadium

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| id            | int     |
| visit_date    | date    |
| people        | int     |
+---------------+---------+
visit_date is the primary key for this table.
Each row of this table contains the visit date and visit id to the stadium with the number of people during the visit.
No two rows will have the same visit_date, and as the id increases, the dates increase as well.
 

Write an SQL query to display the records with three or more rows with consecutive id's, and the number of people is greater than or equal to 100 for each.

Return the result table ordered by visit_date in ascending order.

The query result format is in the following example.

 

Example 1:

Input: 
Stadium table:
+------+------------+-----------+
| id   | visit_date | people    |
+------+------------+-----------+
| 1    | 2017-01-01 | 10        |
| 2    | 2017-01-02 | 109       |
| 3    | 2017-01-03 | 150       |
| 4    | 2017-01-04 | 99        |
| 5    | 2017-01-05 | 145       |
| 6    | 2017-01-06 | 1455      |
| 7    | 2017-01-07 | 199       |
| 8    | 2017-01-09 | 188       |
+------+------------+-----------+
Output: 
+------+------------+-----------+
| id   | visit_date | people    |
+------+------------+-----------+
| 5    | 2017-01-05 | 145       |
| 6    | 2017-01-06 | 1455      |
| 7    | 2017-01-07 | 199       |
| 8    | 2017-01-09 | 188       |
+------+------------+-----------+
Explanation: 
The four rows with ids 5, 6, 7, and 8 have consecutive ids and each of them has >= 100 people attended. Note that row 8 was included even though the visit_date was not the next day after row 7.
The rows with ids 2 and 3 are not included because we need at least three consecutive ids.


Summary :

1. We have a table called "Courses" that contains information about students and the classes they are enrolled in. The table has two columns: "student" and "class." Each row represents a student and their corresponding class. The combination of "student" and "class" is the primary key, meaning each pair is unique in the table.

2. The goal is to find all the classes that have at least five students. We want to identify the classes that are popular and have a significant number of students enrolled.

3. To solve the problem, we need to analyze the data in the "Courses" table. We count the number of students for each class and check if the count is at least five. If it is, we include that class in the result.

4. The expected output is a result table that contains the names of the classes with at least five students. The order of the classes in the result table does not matter.


Solutions :

1. 

SELECT DISTINCT t1.*
FROM Stadium t1, Stadium t2, Stadium t3
WHERE t1.people >= 100 AND t2.people >= 100 AND t3.people >= 100
  AND (
    (t1.id - t2.id = 1 AND t1.id - t3.id = 2 AND t2.id - t3.id = 1) OR
    (t2.id - t1.id = 1 AND t2.id - t3.id = 2 AND t1.id - t3.id = 1) OR
    (t3.id - t2.id = 1 AND t2.id - t1.id = 1 AND t3.id - t1.id = 2)
  )
ORDER BY t1.visit_date;


2.

WITH q1 AS (
SELECT *, id - row_number() over() AS id_diff
FROM stadium
WHERE people > 99
)
SELECT id, visit_date, people
FROM q1
WHERE id_diff IN (SELECT id_diff FROM q1 GROUP BY id_diff HAVING COUNT(*) > 2)
ORDER BY visit_date
