607. Sales Person (https://leetcode.com/problems/sales-person/?envType=list&envId=e97a9e5m)

Table: SalesPerson

+-----------------+---------+
| Column Name     | Type    |
+-----------------+---------+
| sales_id        | int     |
| name            | varchar |
| salary          | int     |
| commission_rate | int     |
| hire_date       | date    |
+-----------------+---------+
sales_id is the primary key column for this table.
Each row of this table indicates the name and the ID of a salesperson alongside their salary, commission rate, and hire date.
 

Table: Company

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| com_id      | int     |
| name        | varchar |
| city        | varchar |
+-------------+---------+
com_id is the primary key column for this table.
Each row of this table indicates the name and the ID of a company and the city in which the company is located.
 

Table: Orders

+-------------+------+
| Column Name | Type |
+-------------+------+
| order_id    | int  |
| order_date  | date |
| com_id      | int  |
| sales_id    | int  |
| amount      | int  |
+-------------+------+
order_id is the primary key column for this table.
com_id is a foreign key to com_id from the Company table.
sales_id is a foreign key to sales_id from the SalesPerson table.
Each row of this table contains information about one order. This includes the ID of the company, the ID of the salesperson, the date of the order, and the amount paid.
 

Find the names of all the salespersons who did not have any orders related to the company with the name "RED".

Return the result table in any order.

The result format is in the following example.

 

Example 1:

Input: 
SalesPerson table:
+----------+------+--------+-----------------+------------+
| sales_id | name | salary | commission_rate | hire_date  |
+----------+------+--------+-----------------+------------+
| 1        | John | 100000 | 6               | 4/1/2006   |
| 2        | Amy  | 12000  | 5               | 5/1/2010   |
| 3        | Mark | 65000  | 12              | 12/25/2008 |
| 4        | Pam  | 25000  | 25              | 1/1/2005   |
| 5        | Alex | 5000   | 10              | 2/3/2007   |
+----------+------+--------+-----------------+------------+
Company table:
+--------+--------+----------+
| com_id | name   | city     |
+--------+--------+----------+
| 1      | RED    | Boston   |
| 2      | ORANGE | New York |
| 3      | YELLOW | Boston   |
| 4      | GREEN  | Austin   |
+--------+--------+----------+
Orders table:
+----------+------------+--------+----------+--------+
| order_id | order_date | com_id | sales_id | amount |
+----------+------------+--------+----------+--------+
| 1        | 1/1/2014   | 3      | 4        | 10000  |
| 2        | 2/1/2014   | 4      | 5        | 5000   |
| 3        | 3/1/2014   | 1      | 1        | 50000  |
| 4        | 4/1/2014   | 1      | 4        | 25000  |
+----------+------------+--------+----------+--------+
Output: 
+------+
| name |
+------+
| Amy  |
| Mark |
| Alex |
+------+
Explanation: 
According to orders 3 and 4 in the Orders table, it is easy to tell that only salesperson John and Pam have sales to company RED, so we report all the other names in the table salesperson.



Summary :

1. We have three tables: "SalesPerson," "Company," and "Orders." Each table contains information about salespersons, companies, and orders, respectively.

2. The "SalesPerson" table includes columns such as "sales_id," "name," "salary," "commission_rate," and "hire_date." Each row represents a salesperson and provides details such as their ID, name, salary, commission rate, and hire date.

3. The "Company" table includes columns such as "com_id," "name," and "city." Each row represents a company and provides details such as the company's ID, name, and city location.

4. The "Orders" table includes columns such as "order_id," "order_date," "com_id," "sales_id," and "amount." Each row represents an order and provides information about the order ID, order date, the company's ID associated with the order, the salesperson's ID who made the sale, and the amount paid for the order.

5. The goal is to find the names of all the salespersons who did not have any orders related to the company with the name "RED." In other words, we need to identify the salespersons who did not make any sales to the company named "RED."

6. To solve the problem, we need to analyze the data in the "Orders" table. We need to find salespersons who do not have any orders with a company named "RED." We can achieve this by checking the "com_id" column in the "Orders" table and comparing it to the company ID for the company named "RED" in the "Company" table.

7. The expected output is a result table that contains the names of the salespersons who did not make any sales to the company named "RED." The order of the names in the result table does not matter.


Solutions :

1. Using Natural Join

SELECT name
FROM SalesPerson
WHERE sales_id NOT IN 
(
  SELECT sales_id
  FROM Company 
  NATURAL JOIN Orders 
  WHERE name = 'RED'
)


2. 

SELECT S.name FROM SalesPerson S 
WHERE S.sales_id NOT IN(SELECT O.sales_id FROM Company C,Orders O 
                        WHERE C.com_id = O.com_id AND C.name = "RED");
